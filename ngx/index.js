import { __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
/**
 * @name Ipos Printer
 * @description
 * This plugin does something
 *
 * @usage
 * ```typescript
 * import { IposPrinter } from '@awesome-cordova-plugins/ipos-printer';
 *
 *
 * constructor(private iposPrinter: IposPrinter) { }
 *
 * ...
 *
 *
 * this.iposPrinter.functionName('Hello', 123)
 *   .then((res: any) => console.log(res))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 */
export var PrinterStatus;
(function (PrinterStatus) {
    PrinterStatus[PrinterStatus["PRINTER_NORMAL"] = 0] = "PRINTER_NORMAL";
    PrinterStatus[PrinterStatus["PRINTER_PAPERLESS"] = 1] = "PRINTER_PAPERLESS";
    PrinterStatus[PrinterStatus["PRINTER_THP_HIGH_TEMPERATURE"] = 2] = "PRINTER_THP_HIGH_TEMPERATURE";
    PrinterStatus[PrinterStatus["PRINTER_MOTOR_HIGH_TEMPERATURE"] = 3] = "PRINTER_MOTOR_HIGH_TEMPERATURE";
    PrinterStatus[PrinterStatus["PRINTER_IS_BUSY"] = 4] = "PRINTER_IS_BUSY";
    PrinterStatus[PrinterStatus["PRINTER_ERROR_UNKNOWN"] = 5] = "PRINTER_ERROR_UNKNOWN";
})(PrinterStatus || (PrinterStatus = {}));
var IposPrinter = /** @class */ (function (_super) {
    __extends(IposPrinter, _super);
    function IposPrinter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IposPrinter.prototype.getPrinterStatus = function () { return cordova(this, "getPrinterStatus", {}, arguments); };
    IposPrinter.prototype.printerInit = function () { return cordova(this, "printerInit", {}, arguments); };
    IposPrinter.prototype.setPrinterPrintDepth = function (depth) { return cordova(this, "setPrinterPrintDepth", {}, arguments); };
    IposPrinter.prototype.setPrinterPrintFontType = function (typeface) { return cordova(this, "setPrinterPrintFontType", {}, arguments); };
    IposPrinter.prototype.setPrinterPrintFontSize = function (fontsize) { return cordova(this, "setPrinterPrintFontSize", {}, arguments); };
    IposPrinter.prototype.setPrinterPrintAlignment = function (alignment) { return cordova(this, "setPrinterPrintAlignment", {}, arguments); };
    IposPrinter.prototype.printerFeedLines = function (lines) { return cordova(this, "printerFeedLines", {}, arguments); };
    IposPrinter.prototype.printBlankLines = function (lines, height) { return cordova(this, "printBlankLines", {}, arguments); };
    IposPrinter.prototype.printText = function (text) { return cordova(this, "printText", {}, arguments); };
    IposPrinter.prototype.printSpecifiedTypeText = function (text, typeface, fontsize) { return cordova(this, "printSpecifiedTypeText", {}, arguments); };
    IposPrinter.prototype.printSpecFormatText = function (text, typeface, fontsize, alignment) { return cordova(this, "printSpecFormatText", {}, arguments); };
    IposPrinter.prototype.printColumnsText = function (colsTextArr, colsWidthArr, colsAlign, isContinuousPrint) { return cordova(this, "printColumnsText", {}, arguments); };
    IposPrinter.prototype.printBitmap = function (alignment, bitmapSize, mBitmap) { return cordova(this, "printBitmap", {}, arguments); };
    IposPrinter.prototype.printBarCode = function (data, symbology, height, width, textposition) { return cordova(this, "printBarCode", {}, arguments); };
    IposPrinter.prototype.printQRCode = function (data, modulesize, mErrorCorrectionLevel) { return cordova(this, "printQRCode", {}, arguments); };
    IposPrinter.prototype.printRawData = function (rawPrintData) { return cordova(this, "printRawData", {}, arguments); };
    IposPrinter.prototype.sendUserCMDData = function (data) { return cordova(this, "sendUserCMDData", {}, arguments); };
    IposPrinter.prototype.printerPerformPrint = function (feedlines) { return cordova(this, "printerPerformPrint", {}, arguments); };
    IposPrinter.pluginName = "IposPrinter";
    IposPrinter.plugin = "cordova-plugin-ipos-printe";
    IposPrinter.pluginRef = "com.mgdisc.IposPrinter";
    IposPrinter.repo = "https://github.com/Malindu22/cordova-plugin-ipos-printer.git";
    IposPrinter.platforms = ["Android"];
    IposPrinter.decorators = [
        { type: Injectable }
    ];
    return IposPrinter;
}(AwesomeCordovaNativePlugin));
export { IposPrinter };
//# sourceMappingURL=data:application/json;base64,